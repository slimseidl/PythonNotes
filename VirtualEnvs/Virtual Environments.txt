In Python, virtual environments create isolated and independent environments for Python projects

    - allow developers to manage dependencies and packages specific to each project 
        without interference or conflicts with other projects or the system's global Python installation
    - provide developers with flexibility and convenience when working on Python projects

    
    - VirtualEnv
        -  Python's most widely used tools for creating virtual environments
        - creates isolated environments by creating a copy of the system's Python interpreter and associated libraries
        - easily create, activate, and deactivate virtual environments using command-line tools
    
    - venv 
        - (Built-in): Starting from Python 3.3
        - Python standard library includes the venv module
        - creates an isolated environment with its own Python interpreter and libraries
        - Best for Python 3 and above 
    
    - Conda 
        - (Anaconda/Miniconda)
        - provides a virtual environment manager called conda env
        - create virtual environments with different Python versions and manage packages using the conda package manager

    - Pipenv
        -  higher-level tool built on top of pip and virtualenv
        - combines package management and virtual environment creation into a single workflow. 
    
    - Poetry 
        - modern Python dependency management and packaging tool

Benefits 

    - Dependency Management 
        - manage dependencies for different projects
        - Each project can have its own virtual environmen
        - specific versions of packages, ensuring that project dependencies do not conflict
    
    - Isolation 
        - provide isolation between projects
        - Do not overlap with other projects 
    
    - Reproducibility
        - recreate the exact project development environment
        - By specifying the versions of packages installed within the virtual environment, you can ensure consistent behavior

    - Easy Deployment
        - simplify the deployment process
        - executing a command like python -m venv myenv
        -  provides its own isolated Python interpreter, and you can install packages using pip
    
Example 

    import sys
    import venv 
    # Specify the path where you want to create the virtual environment
    venv_path = '/path/to/myenv'
    # Create the virtual environment
    venv.create(venv_path, clear=True, with_pip=True)
    # Activate the virtual environment
    activate_script = venv_path + '/Scripts/activate.bat' if sys.platform == 'win32' else venv_path + '/bin/activate'
    exec(open(activate_script).read())

    ** replace /path/to/myenv with the path that leads to where you want to create your virtual environment

    venv.create() function creates the virtual environment
    clear=True argument clears any existing files in the target directory before creating the environment
    with_pip=True argument includes pip in the virtual environment, allowing you to install packages later

Activation of Virtual Environments 

    To activate a virtual environment in Python, you typically use the source command
    followed by the path to the activate script located in the virtual environment directory. 
    In this case, the correct command would be "source myenv/bin/activate."