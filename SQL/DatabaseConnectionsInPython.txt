Connections 

    - MySQL Connectors
    - Connector/Python is a MySQL component based on the DB-API standard
    - uses Connector/Python by importing the mysql.connector module
    - must connect to a database prior to executing queries
    - A connection is an object of the MySQLConnection class that is created with the mysql.connector.connect() function,
        - Specifies the database server address, database name, login username, and password.
    - Creating a connection fails if the database is not found or login credentials are invalid
    - connections are usually created within the try block
        - If the connection fails, the except block executes and typically prints an error message
    - releases the connection when no longer needed with the connection.close() 

    - import mysql.connector from mysql.connector import errorcode

            try:
                reservationConnection = mysql.connector.connect(
                    user='samsnead',
                    password='*jksi72$',
                    host='127.0.0.1',
                    database='Reservation')

            except mysql.connector.Error as err:
                if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
                    print('Invalid credentials')
                elif err.errno == errorcode.ER_BAD_DB_ERROR:
                    print('Database not found')
                else:
                    print('Cannot connect to database:', err)

            else:
                # Execute database operations...
                reservationConnection.close()

Cursors 

    - an object of the MySQLCursor class that executes SQL statements and stores the results
    - created with the connection.cursor() method
    - SQL statements are compiled and executed with the cursor.execute() 
    - must be released with the cursor.close() method 
    - results of INSERT, UPDATE, and DELETE statements are not automatically saved in the database
    - connection.commit() method saves all changes
    - connection.rollback() method discards all changes
    - commit() and rollback() methods must appear prior to releasing the cursor

    Additional Methods 

        - cursor.rowcount property is the number of rows returned or altered by a query
        - cursor.column_names property is a list of column names in a query result
        - cursor.fetchwarnings() method returns a list of warnings generated by a query

    Example:

        SalesCursor = reservationConnection.cursor()

        SalesQuery = ('Select * From Erp.OrderHead Where OrderDate >= 01/01/2025)

        SalesCursor.execute(SalesQuery)

        .commit()
        .close()

Query parameters

    - The cursor.execute() method can substitute Python values into the given SQL statement using query parameters

        - The SQL statement uses the placeholder characters %s to represent the query values
        - A tuple containing values to be assigned to the placeholders is passed as the second argument to cursor.execute(
            - tuple values are mapped to the %s placeholders, in sequence, when the SQL statement executes
        - cursor.execute() method prevents SQL injection when assigning values to placeholders


        Example query with placeholders 

        
            print('Flight number? ', end = '')
            flightNum = input()
            print('Airline? ', end = '')
            airline = input()
            print('Airport code? ', end = '')
            airportCode = input()

            flightCursor = reservationConnection.cursor()
            flightQuery = ('INSERT INTO Flight '
                        '(FlightNumber, AirlineName, AirportCode) '
                        'VALUES (%s, %s, %s)')

            flightData = (flightNum, airline, airportCode)
            flightCursor.execute(flightQuery, flightData)

            reservationConnection.commit()
            flightCursor.close()

Fetching Values 

    - When cursor.execute() executes a SELECT statement, the query results are accessed with fetch methods:
    
        - cursor.fetchone() returns a tuple containing a single result row or the value None if no rows are selected
            - If a query returns multiple rows, cursor.fetchone() may be executed repeatedly until it returns None
        - cursor.fetchall() returns a list of tuples containing all result rows
            - The tuple list can be processed in a loop
            - for rowTuple in cursor.fetchall() assigns each row to rowTuple and terminates when all rows are processed

            flightCursor = reservationConnection.cursor()
            flightQuery = ('SELECT FlightNumber, DepartureTime FROM Flight '
                        'WHERE AirportCode = %s AND AirlineName = %s')
            flightData = ('PEK', 'China Airlines')
            flightCursor.execute(flightQuery, flightData)
            for row in flightCursor.fetchall():
            print('Flight', row[0], 'departs at', row[1])

            flightCursor.close()



from mysql import connector  # load connector functions

connection = connector.connect(  # (A)
    user='Blaise',
    password='Pascal',
    host='localhost',
    database='college'
)

rowcursor = connection.cursor()  # (B)
query = 'SELECT * FROM Room'
rowcursor.execute(query)  # (C) = rowcursor, (D) = execute
for row in rowcursor.fetchall():  # (E) = fetchall
    print(row)
rowcursor.close()  # (F)
connection.close()  # (G)

A = Connect - Establishes a connection, providing login and database information as parameters.
B = Cursor - Creates a cursor
C/D = RowCursor.Execute - Executes query and makes results availalble
E = Fetchall - Retrieves all results from the cursor in one function call
F = rowcursor.close() - Closes the cursor. A cursor must be released with the close() method prior to closing the associated connection.
G = Connection.Close() - Closes the connection to the database 