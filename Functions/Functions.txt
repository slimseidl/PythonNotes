Functions
- def add(x,y)
    - return x + y
    - val = x + y
    - return val 

def subtract(a,b):
    x = a - b 
    return x 


Function Stubs
    functions whose definitions havent been written yet 
    behavior can be captured before diving into function details
    def calories(num_steps):
        pass 
        - nothing is performed until function is defined

    def steps_to_cals(steps):
        print(f'FIXME: NEEDS DEFINED')
            - adds a note that it needs defined when used

Functions can include branches / loops 

Fees given an item selling price for an auction webssite

def calc_ebay_fee(sell_price):
    """Returns the fees charged by ebay.com given the selling
    price of fixed-price books, movies, music, or video games.
    fee is $0.50 to list plus 13% of selling price up to $50.00,
    5% of amount from $50.01 to $1000.00, and 
    2% for amount $1000.01 or more."""

    p50 = 0.13  # for amount $50 and lower
    p50_to_1000 = 0.05  # for $50.01-$1000
    p1000 = 0.02  # for $1000.01 and higher
    fee = 0.50  # fee to list item

    if sell_price <= 50:
        fee  = fee + (sell_price*p50)
    elif sell_price <= 1000:
        fee = fee + (50*p50) + ((sell_price-50)*p50_to_1000)
    else:
        fee = fee + (50*p50) + ((1000-50)*p50_to_1000) \
                  + ((sell_price-1000)*p1000)

    return fee

selling_price = float(input('Enter item selling price (ex: 65.00): '))
print('eBay fee: $', calc_ebay_fee(selling_price))

Functions = objects in python 

Variable scope 
    when a variable is created inside a function, it is only visibile in the function 
        def add(x,y):
            sum = x + y 
            return sum 

            sum is a local variable inside the function add() 
    Global variables are defined outside of functions and available to the whole file 


Namespaces
    maps names to objects
    used to keep track of objects in a program 

    globals()
        can print to view global variables 
        functions are global unless built in 
    locals()
        local variables

Arbitrary function arguments 
    if you dont know how many args or params will be passed to a function use *args 

    example:
        def print_sandwich(bread, meat, *args): 
    print(f'{meat} on {bread}', end=' ') 
    if len(args) > 0: 
        print('with', end=' ') 
    for extra in args: 
        print(extra, end=' ') 
    print('')

    print_sandwich('sourdough', 'turkey', 'mayo')
    print_sandwich('wheat', 'ham', 'mustard', 'tomato', 'lettuce')

    returns 
    turkey on sourdough with mayo
    ham on wheat with mustard tomato lettuce

    Can also use **kwargs to create a dcitionary containing extra arguments that aren't defined 
        - short of keyword arguments 
        - keys of the dictionary 

        def print_sandwich(meat, bread, **kwargs):
    print(f'{meat} on {bread}')
    for category, extra in kwargs.items():
        print(f'   {category}: {extra}')
    print()

    print_sandwich('turkey', 'sourdough', sauce='mayo')
    print_sandwich('ham', 'wheat', sauce1='mustard', veggie1='tomato', veggie2='lettuce')

Functions are limited to one return statement but can be packed into a tuple to return multiple values 
    student_scores = [75, 84, 66, 99, 51, 65]

def get_grade_stats(scores):
    # Calculate the arithmetic mean
    mean = sum(scores)/len(scores)
    
    # Calculate the standard deviation
    tmp = 0
    for score in scores:
        tmp += (score - mean )**2
    std_dev = (tmp/len(scores))**0.5

    # Package and return average, standard deviation in a tuple
    return mean, std_dev

    # Unpack tuple
    average, standard_deviation = get_grade_stats(student_scores)

    print('Average score:', average)
    print('Standard deviation:', standard_deviation)

Document each function accordingly 
    - high level overview 
Docstrings 
""" This is a docstring to describe a function and can span multiple lines """ 

Help Function 
help() 
    provides documentation associated with an object 
    help(my_function)
        prints docstrings for programmer 

    Works with most built in types as well such as str, range, max, list, int, dict etc.. 