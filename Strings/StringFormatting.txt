String Formatting
Common Formatting presentation types
- s = string 
    - print(f'{name:s})
- d = decimal for integers only
    - print(f'{number:d})
    - prints as decimal number
- b = binary
- x lower case
- X upper case
- e prints in exponent notation
- f fixed point notation
    print(f'{number:.2f})
    two decimals


Advanced String Formatting 

String Spacing / Field Widths
    print(my_str:10)
        gives the field 10 total spaces for alignment 
    strings are left aligned, but numbers are right aligned

    name = 'Joe'
    matches = 20
    points = 8
    print(f'{name:6}{points:4}{matches:5}'

    'Joe' has 3 characters, and the field width is 6, so 3 extra spaces are added after 'Joe'.
    8 has 1 character, and the field width is 4, so 3 extra spaces are added before 8.
    20 has 2 characters, and the field width is 5, so 3 extra spaces are added before 20.

Text Alignment 
    Alignment characters determine how a val should be aligned within its field width 
    < = left 
    > = right 
    ^ = centered 
    used before the field width 

    print(f'{"Player Name":<16})
    prints player name aligned to left 

Fill Characters 
    used to pad a replacement field when the string being inserted is samller than field width 
    default is a space and not passed as a parameter 
    score = 5
    print(f'{score:*>4})
    yields ***5

String Methods 
    Replace(old, new)
    repalce(old, new, count)

    phrase = 'Someday I will have three goats, six horses, and nine llamas.'
    phrase = phrase.replace('one', 'uno')


    Find(x)
        finds the first occurence of item x in a string or else returns -1 
        can be a variable or string literal 

        my_str = Hooray, you's a winna! 
        my_str.find(!) returns index 21
        my_Str.find(Hoo) returns 0 
        my_str.find(oo) returns 1 (first index of first occurring match)
    Find(x, start)
        same but start = index to start at 
    Find(x, start, end)

    rfind(x)
        searches stirng in reverse order 
    count(x)
        counts occurrences of string in string 

True or False Returning 

    my_string.isalnum()
        true if all upper or all lower or all nums are 0-9 
    string.isdigit()
        0-9
    string.islower
    string.isupper()
    string.isspace()
        true if all whitespace
    string.startswith(x)
    string.endswith(x)


Creating new strings from a string 

.capitalize()
newstr = string.capitalize()
    cap on first letter

.lower()
.upper()
.strip() 
    removes leading and trailing whitespace 
.title()


Splitting and Joining Strings 

.split()
    space is default separator 
    can pass a separator such as a comma 
    split breaks the string into a list 
    my_str = "My name is slim shady" becomes [my, name, is, slim, shady] after using my_str = my_str.split()

    string = a$B$c 
    string.split('$') = [a,B,c]

    If a string starts or end with the separator, then an empty string is created in the token list 

.join()

    inverse of split 
    my_str = '@'.join([John,Seidl]) = John@Seidl 

    separator can be anything

a lot of times split and join are used together to replace a separator
    title = 'Python-Lab-Warmup'
    tokens = title.split('-')
    title = ':'.join(tokens)
    = Python:Lab:Warmup

format() method

    number = 6
    amount = 32

    print(f'{} burritos cost ${}'.format(number,amount))

    - basically another way of using f strings 
- Positional replacement: 
    'The {1} in the {0} is {2}.'.format('hat', 'cat', 'fat') returns The cat in the hat is fat by indexing 

- Inferred replacement 
    'The {} in the {} is {}.'.format('cat', 'hat', 'fat')
    date = 'April {}, {}'
    print(date.format(22, 2020)) = April 22, 2020

- Named replacement 
    'The {animal} in the {headwear} is {shape}.'.format(animal='cat', headwear='hat', shape='fat')
    - Allows a programmer to create a keyword argument that defines a name and value in the format() parentheses
    - Good practice is to use named replacement when formatting strings with many replacement fields to make the code more readable.

- Double braces {{ }} can be used to place an actual curly brace into a string


