- List Functions
    - len(list)
    - list1 + list2 
        - concat list 2 to end of list 1
    - min(list)
    - max(list)
    - sum(list)
    - list.index(val)
        - finds the index of first matching value
        - or returns val of index
    - list.count(val)
        - counts instances of a value in the list 
    - list.pop()
        - removes a list value, takes an index as an argument
        - mylist.pop(0) removes first element
    - list.remove()
        - removes a mathcing value
        - mylist.remove('apple')

A list is a container 

Common list operations
- my_list = [1,2,3]
    - creates a list
- Creating a list a second way 
    -list(iter)
    - my_list = list(123) = [1, 2, 3]
Get an element from list 
    - list[index]
    - list[7]
my_list[start:end]

- Combining lists 
    - mylist1 + mylist 2
- Change value of list item
    -mylist[1] = 'banana'
    - changes 1 element to banana 
- Delete an element 
    - del mylist[1]


List Methods 

- list.append(value)
    adds element to end of list 

- list.extend([x])
    adds all items in [x] to end of list 
    - my_list.extend([4, 12]) adds 4 and 12 to list 

- list.insert(i, x)
    inserts x into lsit before position i 

- list.remove(x)
    removes first matching value x from list 

- list.pop() 
    removes and returns last element from list 

- list.pop(i)
    removes and returns item at position i from list 

- list.sort()
    sorts the list 

- list.reverse()
    reverses order of list

- list.index(x)
    returns index of matching value x 

- list.count(x)
    coutns number of times x in list

- Enumerate 
    iterates over a list and provides an iteration counter 
    - returns variables 
    - for pos, token in enumerate(tokens):

Built in Functions 

- all(list)
    True if every element in list it True (does not = 0)

- any(list)
    True if any element in lsit is true (any vlaue != 0)

- max(list)
    get max element 
- min(list) = get min 
- sum(list)

List Slicing 

    my_list[0:3] = accesses elements 0 thru 2 

    Can also use a stride length to specify increments 
    my_list[0:10:2] = accesses elements 0 thru 9 going up by 2's 

    Common list slicing methods:

        my_list[start:end]

        my_list[start:end:stride]

        my_list[start:]

        my_list[:end]

        my_list[:]
            - gets a copy of the list 

Loops to modify lists 

    my_list = [3.2, 5.0, 16.5, 12.25]

    for i in range(len(my_list)):
        my_list[ i ] += 5

List comprehension

    iterates over a list, modifies each element, and returns a new list consisting of modified elements 

    A list comprehension has three components:

        An expression component to evaluate for each element in the iterable object.
        A loop variable component to bind to the current iteration element.
        An iterable object component to iterate over (list, string, tuple, enumerate, etc).

    Add 5 to every element:
    my_list = [10, 20, 30]
    list_plus_5 = [(i + 5) for i in my_list]

    Covert to a string: 
    my_list = [5, 20, 50]
    my_list = [str(i) for i in my_list]

    Covert to integers:
    my_list = [int(i) for i in inp.split()]

    Find sum of each row in two dimensional list:
    sum_list = [sum(row) for row in my_list]


Sorting Lists 

    my_list.sort()

    sorted_numbers = sorted(numbers)

    also supports the reverse parameter (true or false)
        - sorted([15,20,25], reverse=True)
        - reverse sorts the list 

    Other Arguments:
        - key 
            - specifies a function to be applied to each element before comparing for sorts 
            - str.lower, str.upper, str.capitalize 
        - key_sort = sorted(names, key=str.lower)
    
