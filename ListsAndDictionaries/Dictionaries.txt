Dictionaries
- Accessed by using keys rather than indices
- my_dcitionary['Messi']
    - Returns a value associated with Messi
- Adding new key value pairs
    - dict[k] = 7
- Can be modified in place
    - students['John'] = 'A+'
Deleting Values
    - del dict[k]
    - removes k 


Key value pairs in a dict 

Operations 

- Indexing operation - returns value from a key 
    dict[key]
- Adding a key value pair 
    dict[key] = value 
- Deletion 
    del dict[key]
- Iteration 
    key in dict 

Keys can contain multiple values or lists 

Can write out a dictionary or use the dict function dict() with parameters 

    dict = {Bob: A+, Tom: B} is the same as dict(name='Bob, grade=A+, name=Tom, grade=B)


Methods 

Remove all items from dictionary 
    dict.clear()

Reads the value of the key from the dictionary. If the key does not exist in the dictionary, then returns default value specified.
    dict.get(key,default)

Merges dictionary my_dict1 with another dictionary my_dict2.
    dict1.update(dict2)

Removes and returns the key value from the dictionary. If key does not exist, then default is returned.
    dict.pop(key,default)



Iteration over Dictionary 
    - use for loops to iterate over keys 

View Objects 
- read only access to dict keys and vals 

    dict.items() 
        returns a view object that yields a tuple of key value pairs
        num_calories = dict(Coke=90, Coke_zero=0, Pepsi=94)
        for soda, calories in num_calories.items():
            print(f'{soda}: {calories}')
        Coke: 90
        Coke_zero: 0
        Pepsi: 94

    dict.keys()
        returns the keys
    dict.values()
        returns values 

Nested Dicts 
    Keys contain a dictionary as a value 
        students = {}
        students ['Jose'] = {'Grade': 'A+', 'StudentID': 22321}
    